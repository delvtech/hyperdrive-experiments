# %%
# This script showcases the burrito attack on hyperdrive.
# Key parameters:
#   fixed rate = variable rate = time stretch APR = 0.5 (50%)
#   circuit breaker delta = 1e3
#   position duration = 4 weeks (32 days)
#   target agent (Alice) contribution = 100k
#   bad agent (Celine) contribution = 1M
#
# Steps:
#   1. Alice LPs
#   2. Celine opens a max short (for as much as budget allows)
#   3. Celine LPs (for contribution amount)
#   4. Celine opens a max long (for as much as budget allows)
#   5. Time elapses (x-axis amount in plot)
#   6. Celine closes all positions
#   7. Alice closes all positions

# %
from decimal import Decimal

from fixedpointmath import FixedPoint

from agent0 import LocalChain, LocalHyperdrive
from agent0.core.hyperdrive.interactive.local_hyperdrive_agent import LocalHyperdriveAgent

SECONDS_IN_A_YEAR = 365 * 24 * 60 * 60
SECONDS_IN_A_DAY = 24 * 60 * 60

TIME_STRETCH = FixedPoint(0.5)
CIRCUIT_BREAKER_DELTA = FixedPoint(1e3)

TARGET_AGENT_CONTRIBUTION = FixedPoint(100_000)
BAD_AGENT_CONTRIBUTION = FixedPoint(1_000_000)
POSITION_DURATION = 4 * 604_800  # 4 weeks


data = []

chain = LocalChain()
# Initialize pool with bad time stretch and circuit breaker delta
pool = LocalHyperdrive(
    chain=chain,
    config=LocalHyperdrive.Config(
        factory_max_circuit_breaker_delta=FixedPoint(2e3),
        factory_max_fixed_apr=FixedPoint(10),
        circuit_breaker_delta=CIRCUIT_BREAKER_DELTA,
        initial_fixed_apr=TIME_STRETCH,
        initial_time_stretch_apr=TIME_STRETCH,
        initial_liquidity=FixedPoint(1_000),
        # curve_fee=FixedPoint(0.01),
        # flat_fee=FixedPoint(0.0005),
        curve_fee=FixedPoint(0),
        flat_fee=FixedPoint(0),
        governance_lp_fee=FixedPoint(0),
        governance_zombie_fee=FixedPoint(0),
        initial_variable_rate=TIME_STRETCH,
        position_duration=POSITION_DURATION,
    ),
)

target_agent = chain.init_agent(
    eth=FixedPoint(10),
    base=TARGET_AGENT_CONTRIBUTION,
    pool=pool,
    name="target",
)
bad_agent = chain.init_agent(
    eth=FixedPoint(10),
    base=FixedPoint(BAD_AGENT_CONTRIBUTION * 2),
    pool=pool,
    name="bad",
)
start_time = chain.block_time()

# Target adds lp
target_lp_event = target_agent.add_liquidity(target_agent.get_wallet().balance.amount)

# Bad agent opens a max short, adds lp, and a max long
max_short = pool.interface.calc_max_short(budget=bad_agent.get_wallet().balance.amount)
bad_agent.open_short(max_short)
bad_agent.add_liquidity(BAD_AGENT_CONTRIBUTION)
max_long = pool.interface.calc_max_long(budget=bad_agent.get_wallet().balance.amount)
bad_agent.open_long(max_long)

# Advance position duration
for _ in range(0, POSITION_DURATION, SECONDS_IN_A_DAY):
    # DB updates with pnl information after each advance time
    chain.advance_time(SECONDS_IN_A_DAY, create_checkpoints=True)

# We close the alrealy matured positions so we don't have to account for zombie interest
long = bad_agent.get_longs()[0]
bad_agent.close_long(maturity_time=long.maturity_time, bonds=long.balance)
short = bad_agent.get_shorts()[0]
bad_agent.close_short(maturity_time=short.maturity_time, bonds=short.balance)

# Advance position duration
for _ in range(0, POSITION_DURATION, SECONDS_IN_A_DAY):
    # DB updates with pnl information after each advance time
    chain.advance_time(SECONDS_IN_A_DAY, create_checkpoints=True)

bad_agent.remove_liquidity(bad_agent.get_wallet().lp_tokens)

# target removes liquidity
target_agent.remove_liquidity(target_agent.get_wallet().lp_tokens)

end_time = chain.block_time()
total_time = end_time - start_time

# %%

# Get block number to time mapping
block_to_time = pool.get_pool_info()[["block_number", "epoch_timestamp"]]
historical_pnl = pool.get_historical_pnl()
historical_pnl = historical_pnl.merge(block_to_time, how="left", on="block_number")
historical_pnl["time_delta"] = historical_pnl["epoch_timestamp"] - historical_pnl["epoch_timestamp"].min()

bad_agent_pnl_over_time = historical_pnl[historical_pnl["username"] == "bad"][["block_number", "time_delta", "pnl"]]
target_agent_pnl_over_time = historical_pnl[historical_pnl["username"] == "target"][
    ["block_number", "time_delta", "pnl"]
]

# bad_agent_pnl_over_time["apr"] = (
#     bad_agent_pnl_over_time["pnl"] / BAD_AGENT_CONTRIBUTION / bad_agent_pnl_over_time["time_delta"] * SECONDS_IN_A_YEAR
# )
#
# target_agent_pnl_over_time["apr"] = (
#     target_agent_pnl_over_time["pnl"]
#     / TARGET_AGENT_CONTRIBUTION
#     / target_agent_pnl_over_time["time_delta"]
#     * SECONDS_IN_A_YEAR
# )

bad_agent_pnl_over_time["apr"] = bad_agent_pnl_over_time["pnl"] / BAD_AGENT_CONTRIBUTION

target_agent_pnl_over_time["apr"] = target_agent_pnl_over_time["pnl"] / TARGET_AGENT_CONTRIBUTION


# %%
# Convert to days
bad_agent_pnl_over_time["time_elapsed"] = bad_agent_pnl_over_time["time_delta"] / SECONDS_IN_A_DAY
target_agent_pnl_over_time["time_elapsed"] = target_agent_pnl_over_time["time_delta"] / SECONDS_IN_A_DAY

# # Omit data points during trades for plotting, due to small time elapsed and large wallet deltas
# bad_agent_pnl_over_time = bad_agent_pnl_over_time[bad_agent_pnl_over_time["block_number"] > 33]
# target_agent_pnl_over_time = target_agent_pnl_over_time[target_agent_pnl_over_time["block_number"] > 33]

#

# %%
import seaborn as sns

ax = sns.lineplot(data=bad_agent_pnl_over_time.astype(float), x="time_elapsed", y="apr", label="Bad agent")

sns.lineplot(data=target_agent_pnl_over_time.astype(float), x="time_elapsed", y="apr", label="Target agent")

# sns.lineplot(
#     x=target_agent_pnl_over_time["time_elapsed"].astype(float),
#     y=[0.5] * len(target_agent_pnl_over_time),
#     color="g",
#     linestyle="-",
#     label="Variable rate",
# )

ax.axvline(x=POSITION_DURATION // SECONDS_IN_A_DAY, color="black", linestyle="--")

ax.set(xlabel="Time elapsed (days)", ylabel="APR", title="Burrito attack: APR vs time elapsed")

# %%
# chain.cleanup()
