# %%
# This script does the iterative burrito attack on hyperdrive.
# Key parameters:
#   fixed rate = variable rate = time stretch APR = 0.5 (50%)
#   circuit breaker delta = 1e3
#   position duration = 4 weeks (32 days)
#   target agent (Alice) contribution/budget = 100k
#   bad agent (Celine) contribution = 1M
#   bad agent (Celine) budget = 2M
#   attack iterations = 18
#   time between attack: 4 days
#
# Steps:
#   1. Alice LPs
#   For attack iterations:
#       2. Celine opens a max short (for as much as budget allows)
#       3. Celine LPs (for contribution amount)
#       4. Celine opens a max long (for as much as budget allows)
#       5. Time elapses for time between attack
#       6. Celine closes all positions
#   7. Alice closes all positions

# %%
from decimal import Decimal

import pandas as pd
from fixedpointmath import FixedPoint

from agent0 import LocalChain, LocalHyperdrive
from agent0.core.hyperdrive.interactive.local_hyperdrive_agent import LocalHyperdriveAgent

SECONDS_IN_A_YEAR = 365 * 24 * 60 * 60
SECONDS_IN_A_DAY = 24 * 60 * 60

TIME_STRETCH = FixedPoint(0.5)
CIRCUIT_BREAKER_DELTA = FixedPoint(1e3)

TARGET_AGENT_CONTRIBUTION = FixedPoint(100_000)
BAD_AGENT_CONTRIBUTION = FixedPoint(1_000_000)
POSITION_DURATION = 4 * 604_800  # 4 weeks
TIME_BEFORE_CLOSE = 4 * SECONDS_IN_A_DAY  # 4 days
ATTACK_NUMBER_ITERATIONS = 18


def calc_apr(agent: LocalHyperdriveAgent, agent_budget: FixedPoint, total_time: int) -> Decimal:
    # Calculate total apr
    total_pnl = agent.get_positions(show_closed_positions=True)["pnl"].sum()
    apr = total_pnl / (agent_budget) / total_time * SECONDS_IN_A_YEAR
    print(f"{apr=}")
    print(f"{total_pnl=}, {agent_budget=}")
    return apr


data = []

chain = LocalChain()
# Initialize pool with bad time stretch and circuit breaker delta
pool = LocalHyperdrive(
    chain=chain,
    config=LocalHyperdrive.Config(
        factory_max_circuit_breaker_delta=FixedPoint(2e3),
        factory_max_fixed_apr=FixedPoint(10),
        circuit_breaker_delta=CIRCUIT_BREAKER_DELTA,
        initial_fixed_apr=TIME_STRETCH,
        initial_time_stretch_apr=TIME_STRETCH,
        initial_liquidity=FixedPoint(1_000),
        curve_fee=FixedPoint(0.01),
        flat_fee=FixedPoint(0.0005),
        initial_variable_rate=TIME_STRETCH,
        position_duration=POSITION_DURATION,
    ),
)

variable_rate_pool = LocalHyperdrive(
    chain=chain,
    config=LocalHyperdrive.Config(
        factory_max_circuit_breaker_delta=FixedPoint(2e3),
        factory_max_fixed_apr=FixedPoint(10),
        circuit_breaker_delta=CIRCUIT_BREAKER_DELTA,
        initial_fixed_apr=TIME_STRETCH,
        initial_time_stretch_apr=TIME_STRETCH,
        initial_liquidity=FixedPoint(1_000),
        curve_fee=FixedPoint(0.01),
        flat_fee=FixedPoint(0.0005),
        initial_variable_rate=TIME_STRETCH,
        position_duration=POSITION_DURATION,
    ),
)

target_agent = chain.init_agent(
    eth=FixedPoint(10),
    base=TARGET_AGENT_CONTRIBUTION,
    pool=pool,
    name="target",
)
bad_agent = chain.init_agent(
    eth=FixedPoint(10),
    base=FixedPoint(2 * BAD_AGENT_CONTRIBUTION),
    pool=pool,
    name="bad",
)
variable_rate_agent = chain.init_agent(
    eth=FixedPoint(10),
    # base=TARGET_AGENT_CONTRIBUTION,
    base=BAD_AGENT_CONTRIBUTION,
    pool=variable_rate_pool,
    name="variable_rate",
)
start_time = chain.block_time()

# Variable rate agent adds lp to only gain variable rate on the variable rate pool
variable_rate_event = variable_rate_agent.add_liquidity(variable_rate_agent.get_wallet().balance.amount)

# Target adds lp
target_lp_event = target_agent.add_liquidity(target_agent.get_wallet().balance.amount)

data = []
# Iteratively do this set of trades
for i in range(ATTACK_NUMBER_ITERATIONS):
    # Bad agent opens a max short, adds lp, and a max long
    max_short = pool.interface.calc_max_short(budget=bad_agent.get_wallet().balance.amount)
    bad_agent.open_short(max_short)
    bad_agent.add_liquidity(BAD_AGENT_CONTRIBUTION)
    max_long = pool.interface.calc_max_long(budget=bad_agent.get_wallet().balance.amount)
    bad_agent.open_long(max_long)

    # Advance position duration
    chain.advance_time(TIME_BEFORE_CLOSE, create_checkpoints=True)

    # close all bad agent's positions
    long = bad_agent.get_longs()[0]
    bad_agent.close_long(maturity_time=long.maturity_time, bonds=long.balance)
    short = bad_agent.get_shorts()[0]
    bad_agent.close_short(maturity_time=short.maturity_time, bonds=short.balance)
    bad_agent.remove_liquidity(bad_agent.get_wallet().lp_tokens)

    end_time = chain.block_time()
    total_time = end_time - start_time

    # Calculate total apr
    print("Bad agent:")
    bad_agent_apr = calc_apr(bad_agent, BAD_AGENT_CONTRIBUTION * 2, total_time)
    print("Target agent:")
    target_agent_apr = calc_apr(target_agent, TARGET_AGENT_CONTRIBUTION, total_time)
    print("Variable rate agent:")
    variable_rate_agent_apr = calc_apr(variable_rate_agent, BAD_AGENT_CONTRIBUTION, total_time)
    data.append(
        pd.DataFrame(
            {
                "time_elapsed": [total_time],
                "bad_agent_apr": [bad_agent_apr],
                "target_agent_apr": [target_agent_apr],
                "variable_rate_agent_apr": [variable_rate_agent_apr],
            }
        )
    )

# Variable rate agent removes liquidity
variable_rate_agent.remove_liquidity(variable_rate_agent.get_wallet().lp_tokens)
# target removes liquidity
target_agent.remove_liquidity(target_agent.get_wallet().lp_tokens)


# %%
plot_data = pd.concat(data, axis=0).astype(float)
# Convert to days
plot_data["time_elapsed"] = plot_data["time_elapsed"] / SECONDS_IN_A_DAY
# %%

import seaborn as sns

ax = sns.lineplot(data=plot_data, x="time_elapsed", y="bad_agent_apr", label="Bad agent")

sns.lineplot(data=plot_data, x="time_elapsed", y="target_agent_apr", label="Target agent")
sns.lineplot(data=plot_data, x="time_elapsed", y="variable_rate_agent_apr", label="Variable rate agent")

ax.set(xlabel="Time elapsed (days)", ylabel="APR", title="Iterative Burrito attack: APR vs time elapsed")


# %%
